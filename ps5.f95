MODULE PS5PARA
    IMPLICIT NONE
    INTEGER:: I
    INTEGER, PARAMETER:: N=66, RETIRE_AGE=46 ! LIFE EXPECTANCY AND RETIREMENT
    REAL(KIND=8), PARAMETER:: A_MAX=15.0, A_MIN=0.1, STEP=0.1
    INTEGER, PARAMETER:: NZ=2, NA=(A_MAX-A_MIN)/STEP+1
    REAL(KIND=8):: ALPHA=0.36, BETA=0.97
    REAL(KIND=8), PARAMETER:: THETA=0.11, GAMMA=0.42, SIGMA=2.0, DELTA=0.06, POP_GROWTH= 0.011
    REAL(KIND=8), DIMENSION(2):: PROD_STATES = (/3.0, 0.5/)
    REAL(KIND=8), DIMENSION(2,2):: PROD_MARKOV = TRANSPOSE(RESHAPE((/0.9261,(1-0.9261),(1-0.9811),0.9811/),(/NZ,NZ/)))
    REAL(KIND=8), DIMENSION(NA):: A_GRID = (/(I*STEP, I=1,NA)/) + A_MIN - STEP
    REAL(KIND=8), DIMENSION(N):: COHORT_POP
    REAL(KIND=8), DIMENSION(N,NZ):: AGE_EFF=0.
    CONTAINS
        SUBROUTINE INIT_ARRAY()
            COHORT_POP = (/((1.0/((1.0+POP_GROWTH)**I)), I=1,N)/)
            COHORT_POP = COHORT_POP/SUM(COHORT_POP)
            OPEN(UNIT=13, FILE='ef.txt', STATUS='OLD')
            DO I=1,RETIRE_AGE-1
                READ(UNIT=13, FMT=*) AGE_EFF(I,1)
            ENDDO
            CLOSE(UNIT=13)
            AGE_EFF(:,1) = AGE_EFF(:,1)*0.5
            AGE_EFF(:,2) = AGE_EFF(:,1)*3.0
        END SUBROUTINE
END MODULE

MODULE PS5RES
    use PS5PARA
    IMPLICIT NONE

    REAL(KIND=8):: WAGE, AGG_LABOR=0.5, AGG_CAP=3.0, BENEFIT, INTEREST
    REAL(KIND=8), DIMENSION(NA,NZ,N):: VFUNC, LFUNC, STAT_DIST, VFUNC_OLD
    INTEGER, DIMENSION(NA,NZ,N):: PFUNC=1
END MODULE

PROGRAM PS5
    USE PS5PARA
    USE PS5RES
    IMPLICIT NONE
    REAL(KIND=8):: ERROR=100. , CRIT_P=1e-3, LAST_CHOICE, CUR_CHOICE, OPT_LABOR, NOM, WEL
    INTEGER:: SROWIDX, SCOLIDX, AGEIDX

    CALL INIT_ARRAY()
    PRINT*, NA
    DO WHILE(ERROR>CRIT_P)
        ! UPDATE VARS
        WAGE = (1-ALPHA)*(AGG_CAP**ALPHA)*(AGG_LABOR**(-ALPHA))! FOC WRT LABOR
        INTEREST = ALPHA*(AGG_CAP**(ALPHA-1))*(AGG_LABOR**(1-ALPHA))-DELTA! FOC WRT CAPITAL
        BENEFIT = THETA*WAGE*AGG_LABOR/SUM(COHORT_POP(RETIRE_AGE:N)) ! TAX REV/RETIRED_POP
        PRINT*, "=================================================="
        PRINT*, "R, B,W:", INTEREST, BENEFIT, WAGE
        PRINT*,  "L, K:",AGG_LABOR, AGG_CAP

        ! FIND OPTIMAL LABOR AND POPULATE LFUNC
        LFUNC = 0.
        DO AGEIDX=1, RETIRE_AGE
            DO SROWIDX=1,NA
                DO SCOLIDX=1,NZ
                    CUR_CHOICE = A_GRID(PFUNC(SROWIDX,SCOLIDX,AGEIDX))
                    IF (AGEIDX/=1) THEN
                        LAST_CHOICE = (1+INTEREST)*A_GRID(PFUNC(SROWIDX,SCOLIDX,AGEIDX-1)) ! DISCOUNTED
                    ELSE
                        LAST_CHOICE = 0.
                    ENDIF
                    NOM = (GAMMA*(1-THETA)*PROD_STATES(SCOLIDX)*AGE_EFF(AGEIDX,SCOLIDX)&
                    *WAGE-(1-GAMMA)*((1+INTEREST)*LAST_CHOICE-CUR_CHOICE))
                    OPT_LABOR = NOM/((1-THETA)*WAGE*PROD_STATES(SCOLIDX)*AGE_EFF(AGEIDX,SCOLIDX))
                    IF (OPT_LABOR > 1.0) THEN
                        OPT_LABOR = 0.099
                    ELSE IF (OPT_LABOR < 0.) THEN
                        OPT_LABOR = 0.001
                    ENDIF
                    LFUNC(SROWIDX, SCOLIDX, AGEIDX) = OPT_LABOR
                ENDDO
            ENDDO
        ENDDO
        VFUNC=0.
        PFUNC=1
        ! BACKWARD INDUCTION USING NEW VARS (BELLMAN)
        CALL BACKWARD_INDUCTION()
        ! UPDATE STAT_DIST
        CALL FIND_STAT_DIST()
        ! OBSERVE ERROR AND UPDATE PRICE
        CALL UPDATE_PRICE(ERROR)
    ENDDO

    CALL WRITE_ALL()
    WAGE = (1-ALPHA)*(AGG_CAP**ALPHA)*(AGG_LABOR**(-ALPHA))! FOC WRT LABOR
    INTEREST = ALPHA*(AGG_CAP**(ALPHA-1))*(AGG_LABOR**(1-ALPHA))-DELTA! FOC WRT CAPITAL
    BENEFIT = THETA*WAGE*AGG_LABOR/SUM(COHORT_POP(RETIRE_AGE:N)) ! TAX REV/RETIRED_POP
    DO SROWIDX=1,NA
    DO AGEIDX=1,N
        WEL=WEL+VFUNC(SROWIDX,1,AGEIDX)*STAT_DIST(SROWIDX,1,AGEIDX)+VFUNC(SROWIDX,2,AGEIDX)*STAT_DIST(SROWIDX,2,AGEIDX)
    ENDDO
    ENDDO
    PRINT*, "=================================================="
    PRINT*, "R, B,W:", INTEREST, BENEFIT, WAGE
    PRINT*,  "L, K:",AGG_LABOR, AGG_CAP
    PRINT*, "WELFARE", WEL
END PROGRAM PS5

! SUBROUTINES
SUBROUTINE BACKWARD_INDUCTION()
    USE PS5RES
    USE PS5PARA
    IMPLICIT NONE
    INTEGER:: AGEIDX, AGE, SROWIDX
    REAL(KIND=8):: CONSUM, UTIL, ERROR_VFI, CRIT_VFI=1e-3

    ERROR_VFI=100.
    VFUNC=0.
    DO WHILE(ERROR_VFI> CRIT_VFI)
        ! FOR LAST AGE, ! SHOULD BE DETERMINISTIC, DO ONCE IS OK (NO CHOICE)
        DO SROWIDX=1,NA ! THIS IS THE CHOICE FROM LAST PERIOD/ CURRENT ASSET
                CONSUM = (1+INTEREST)*A_GRID(SROWIDX) + BENEFIT ! SPEND ALL IN LAST PERIOD
                PFUNC(:,:,N) = 1 ! ACTUALLY DOES NOT MATTER
                UTIL = CONSUM**((1-SIGMA)*GAMMA)/(1-SIGMA) ! NO NEXT PERIOD VALUE
                VFUNC(SROWIDX,1,N) = UTIL
                VFUNC(SROWIDX,2,N) = UTIL
                ! ASSET MUST BE ZERO FOR AGE 
        ENDDO

        DO AGEIDX = 2, N ! FOR AGE 20-65
            AGE = N- AGEIDX+1
            CALL BELLMAN(AGE)
        ENDDO
        ERROR_VFI = MAXVAL(ABS(VFUNC-VFUNC_OLD))
        VFUNC_OLD = VFUNC
    ENDDO
END SUBROUTINE

SUBROUTINE BELLMAN(AGE)
    USE PS5RES
    USE PS5PARA
    IMPLICIT NONE
    INTEGER, INTENT(IN):: AGE
    REAL(KIND=8):: COND_MAX_UTIL, CONSUM, UTIL, WORKING, PROD, NEXTU
    INTEGER:: SROWIDX, SCOLIDX, CHOICEIDX

    IF (AGE< RETIRE_AGE) THEN ! WOKRING BELLMAN
        DO SROWIDX=1, NA
            DO SCOLIDX=1, NZ
                COND_MAX_UTIL = -1e12
                WORKING = LFUNC(SROWIDX, SCOLIDX, AGE)
                PROD = PROD_STATES(SCOLIDX)
                DO CHOICEIDX=1,NA ! LOOP OVER CHOICE OF ASSET PRIME
                    CONSUM = A_GRID(SROWIDX) + PROD*WORKING - INTEREST* A_GRID(CHOICEIDX)
                    IF (CONSUM > 0.) THEN
                        NEXTU = BETA*SUM(PROD_MARKOV(SCOLIDX,:)*VFUNC(CHOICEIDX,:,AGE+1))
                        UTIL = (CONSUM**GAMMA*(1-WORKING)**(1-GAMMA))**(1-SIGMA)/(1-SIGMA)+NEXTU
                        IF (UTIL>COND_MAX_UTIL) THEN
                            PFUNC(SROWIDX, SCOLIDX, AGE) = CHOICEIDX
                            COND_MAX_UTIL = UTIL
                        ENDIF
                    ENDIF
                ENDDO ! END LOOP CHOICE SPACE FOR ONE STATE
                    IF (COND_MAX_UTIL<-1E10) THEN
                    PRINT*, VFUNC(PFUNC(SROWIDX,1, AGE),1,AGE+1), VFUNC(PFUNC(SROWIDX,2, AGE),1,AGE+1), AGE, SROWIDX
                    PRINT*, COND_MAX_UTIL, CONSUM, UTIL, (CONSUM**GAMMA*(1-WORKING)**(1.-GAMMA))
                    STOP
                    ENDIF
                VFUNC(SROWIDX, SCOLIDX, AGE) = COND_MAX_UTIL
            ENDDO
        ENDDO
    ELSE ! BELLMAN FOR RETIRED PEOPLE
        DO SROWIDX=1, NA
            COND_MAX_UTIL = -1e12
            DO CHOICEIDX=1, NA
                CONSUM = A_GRID(SROWIDX) + BENEFIT
                IF (CONSUM>0.) THEN
                    UTIL = CONSUM**((1-SIGMA)*GAMMA)/(1-SIGMA)+ BETA*(VFUNC(CHOICEIDX,1,AGE+1))
                    IF (UTIL>COND_MAX_UTIL) THEN
                        PFUNC(SROWIDX,:, AGE) = CHOICEIDX ! NO PRODUCTIVITY DIFFERENCE
                        COND_MAX_UTIL = UTIL
                    ENDIF
                ENDIF
            ENDDO
                IF (COND_MAX_UTIL<-1E10) THEN
                    PRINT*, VFUNC(PFUNC(SROWIDX,1, AGE),1,AGE+1), VFUNC(PFUNC(SROWIDX,2, AGE),1,AGE+1), AGE, SROWIDX
                    PRINT*, COND_MAX_UTIL
                    STOP
                ENDIF
            VFUNC(SROWIDX, 1, AGE) = COND_MAX_UTIL ! PROD_STATE DO NOT AFFECT RETIRED PEOPLE
            VFUNC(SROWIDX, 2, AGE) = COND_MAX_UTIL ! PROD_STATE DO NOT AFFECT RETIRED PEOPLE
        ENDDO
    ENDIF
END SUBROUTINE

SUBROUTINE FIND_STAT_DIST()
    USE PS5PARA
    USE PS5RES
    IMPLICIT NONE
    INTEGER:: SROWIDX, SCOLIDX, AGEIDX, LAST_AGE, LAST_CHOICE
    REAL(KIND=8), DIMENSION(NA,NZ,N):: STAT_DIST_NEW

    ! EVERYONE HAVE ZERO ASSET AT STARTING AGE
    STAT_DIST_NEW = 0.
    STAT_DIST_NEW(1,1,1) = 0.2037* COHORT_POP(1) ! ALWAYS NO ASSET AT FIRST AGE,
    STAT_DIST_NEW(1,2,1) = 0.7963*COHORT_POP(1) !  BUT 2 PROD STATES
    DO AGEIDX=2, N
        DO SROWIDX=1, NA ! LAST PERIOD ASSET
            DO SCOLIDX=1, NZ !LAST PERIOD PRODUCTIVITY
                LAST_CHOICE = PFUNC(SROWIDX, SCOLIDX, AGEIDX-1) ! TWO POSSIBLE
                LAST_AGE = AGEIDX-1
                STAT_DIST_NEW(LAST_CHOICE, 1, AGEIDX) = &
                STAT_DIST_NEW(LAST_CHOICE, 1, AGEIDX)+ STAT_DIST_NEW(SROWIDX,SCOLIDX,LAST_AGE)*PROD_MARKOV(SCOLIDX,1)
                STAT_DIST_NEW(LAST_CHOICE, 2, AGEIDX) = &
                STAT_DIST_NEW(LAST_CHOICE, 2, AGEIDX) + STAT_DIST_NEW(SROWIDX,SCOLIDX,LAST_AGE)*PROD_MARKOV(SCOLIDX,2)
           ENDDO
        ENDDO
        STAT_DIST_NEW(:,:,AGEIDX) = STAT_DIST_NEW(:,:,AGEIDX)*COHORT_POP(AGEIDX)
    ENDDO

    STAT_DIST = STAT_DIST_NEW
    PRINT*, COUNT(STAT_DIST/=0)
END SUBROUTINE

SUBROUTINE UPDATE_PRICE(ERROR)
    ! COMPUTE ERROR AND UPDATE PRICE
    USE PS5RES
    USE PS5PARA
    IMPLICIT NONE
    REAL(KIND=8), INTENT(OUT):: ERROR
    INTEGER:: SROWIDX, SCOLIDX, AGEIDX
    REAL(KIND=8):: AGG_LABOR_NEW=0., AGG_CAP_NEW=0., PORTION, ERROR_LAB, ERROR_CAP

    DO AGEIDX=1, N ! CAL ERRORS
        DO SROWIDX=1,NA
            DO SCOLIDX=1,NZ
                PORTION = STAT_DIST(SROWIDX, SCOLIDX, AGEIDX)
                    AGG_CAP_NEW = AGG_CAP_NEW+ A_GRID(SROWIDX)*PORTION
                IF (AGEIDX<RETIRE_AGE) THEN
                    AGG_LABOR_NEW = AGG_LABOR_NEW+LFUNC(SROWIDX,SCOLIDX,AGEIDX)*PORTION*AGE_EFF(AGEIDX,SCOLIDX)
                ENDIF
            ENDDO
        ENDDO
    ENDDO
    ERROR_LAB = ABS(AGG_LABOR_NEW-AGG_LABOR)
    ERROR_CAP = ABS(AGG_CAP_NEW-AGG_CAP)
    PRINT*, "UPDATE_PRICE ERROR", ERROR_LAB, ERROR_CAP
    ERROR = MAX(ERROR_CAP, ERROR_LAB)
    AGG_LABOR = 0.05*AGG_LABOR_NEW + 0.95*AGG_LABOR
    AGG_CAP = 0.05*AGG_CAP_NEW + 0.95*AGG_CAP
    ! UPDATE INTEREST, WAGE, BENEFIT AT THE START OF NEXT PERIOD (IT IS THE SAME)

END SUBROUTINE

SUBROUTINE WRITE_ALL()
    USE PS5RES
    USE PS5PARA
    IMPLICIT NONE
    INTEGER:: SROWIDX
    CHARACTER(LEN=130):: PATH="/Users/chek_choi/Downloads/fortran/"
    CHARACTER(LEN=150):: FILE_NAME

        FILE_NAME = TRIM(PATH)//"VFUNC"
        OPEN(UNIT=1, FILE=FILE_NAME, STATUS='REPLACE') ! START WITH THE TWO VALUE FUNCTIONS
        DO SROWIDX=1, NA
            WRITE(UNIT=1,FMT=*) VFUNC(SROWIDX,:, 50)
        ENDDO
        CLOSE(UNIT=1)

        FILE_NAME = TRIM(PATH)//"PFUNC"
        OPEN(UNIT=2, FILE=FILE_NAME, STATUS='REPLACE') ! ALSO SAVE POLICY FUNCTIONS
        DO SROWIDX=1, NA
            WRITE(UNIT=2,FMT=*) A_GRID(PFUNC(SROWIDX,1, 20)), A_GRID(PFUNC(SROWIDX,1, 20))
        ENDDO
        CLOSE(UNIT=2)

        FILE_NAME = TRIM(PATH)//"STATDIST"
        OPEN(UNIT=3, FILE=FILE_NAME, STATUS='REPLACE') ! ALSO SAVE POLICY FUNCTIONS
        DO SROWIDX=1, NA
            WRITE(UNIT=3,FMT=*) STAT_DIST(SROWIDX, :, 2)
        ENDDO
        CLOSE(UNIT=3)

        FILE_NAME = TRIM(PATH)//"LFUNC"
        OPEN(UNIT=4, FILE=FILE_NAME, STATUS='REPLACE') ! FOR HAVING THE X-AXIS OF PLOT
        DO SROWIDX=1, NA
            WRITE(UNIT=4,FMT=*) LFUNC(SROWIDX, :, 1)
        ENDDO
        CLOSE(UNIT=4)

        FILE_NAME = TRIM(PATH)//"AGRID"
        OPEN(UNIT=5, FILE=FILE_NAME, STATUS='REPLACE') ! START WITH THE TWO VALUE FUNCTIONS
        DO SROWIDX=1, NA
            WRITE(UNIT=5,FMT=*) A_GRID(SROWIDX)
        ENDDO
        CLOSE(UNIT=5)

        FILE_NAME = TRIM(PATH)//"COHORTPOP"
        OPEN(UNIT=6, FILE=FILE_NAME, STATUS='REPLACE') ! START WITH THE TWO VALUE FUNCTIONS
        DO SROWIDX=1, N
            WRITE(UNIT=6,FMT=*) COHORT_POP(SROWIDX)
        ENDDO
        CLOSE(UNIT=6)
END SUBROUTINE




