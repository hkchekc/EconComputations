MODULE PS4BPARA
    IMPLICIT NONE
    REAL(KIND=8):: ALPHA=1.5, BETA=0.8, INTEREST=0.04, RHO=0.9
    REAL(KIND=8), DIMENSION(2):: STATES = (/1.0, 0.5/)
    REAL(KIND=8), DIMENSION(2,2):: EMP_MARKOV = TRANSPOSE(RESHAPE((/0.75,0.25,0.25,0.75/),(/2,2/)))
    INTEGER, PARAMETER:: NZ=SIZE(STATES)
    REAL(KIND=8),PARAMETER:: A_MAX=2.0, A_MIN=-0.525, STEP=0.005
    INTEGER, PARAMETER:: NA= (A_MAX-A_MIN)/STEP + 1
    INTEGER:: ZERO_LOC= ABS(A_MIN)/STEP + 1
    INTEGER:: I ! ITER
    REAL(KIND=8), DIMENSION(NA), PARAMETER:: A_GRID= (/(I*STEP, I=1,NA)/) + A_MIN - STEP
    LOGICAL:: POOL= .TRUE. ! BOOLEAN FOR POOLING OR SEPARTING EQUILIBRIUM
END MODULE

MODULE PS4BRES     ! FOR RESULTS
    USE PS4BPARA
    IMPLICIT NONE
    REAL(KIND=8), DIMENSION(NA,NZ):: VFUNC_CLEAN=0., VFUNC_CLEAN_NEW=0., VFUNC_DEF=0., VFUNC_DEF_NEW=0.
    INTEGER, DIMENSION(NA,NZ):: PFUNC_CLEAN, PFUNC_DEF, DFUNC
    REAL(KIND=8), DIMENSION(NA*NZ*2):: STAT_DIST= 1/(NA*NZ*2.), STAT_DIST_NEW
    REAL(KIND=8), DIMENSION(NA*NZ*2,NA*NZ*2):: A_TRANSITION_MAT
    REAL(KIND=8), DIMENSION(NA,NZ):: Q= 0.04 ! LIST OF BOND PRICE GIVEN RISK OF DEFAULTING

END MODULE

PROGRAM PS4B ! MAIN PROGRAM
    USE PS4BPARA
    USE PS4BRES
    IMPLICIT NONE
    ! FOR LOOPING
    REAL(KIND=8):: ERROR_VFI, ERROR_CLEAN, ERROR_DEF, ERROR_Q=100. ! INITIAL ERRORS TO BE UPDATED
    REAL(KIND=8):: CRIT_VFI=1e-3, CRIT_Q=1e-3 ! CRITICAL TOLERANCE VALUES
    INTEGER:: SROWIDX, SCOLIDX! SOME INDEXES FOR VARIOUS LOOPS

    PRINT*, "ZERO LOC", A_GRID(ZERO_LOC), NA

    ! MAIN LOOP
    DO WHILE (ERROR_Q>CRIT_Q)
        PRINT*, ERROR_Q
        PRINT*, "====================================================="
        ! VFI (GIVE A BOOL TO INDICATE POOLING/SEPARATING)
        ERROR_VFI = 100.
        DO WHILE (ERROR_VFI>CRIT_VFI)  ! START VFI
            CALL BELLMAN_CLEAN(ERROR_CLEAN) !START BELLMAN CLEAN
            CALL BELLMAN_DEFAULT(ERROR_DEF) ! START BELLMAN DEFAULTED
            ERROR_VFI = MAX(ERROR_CLEAN, ERROR_DEF)
        ENDDO ! END VFI
        ! COMPARE IS CLEAN OR DEFAULT IS BETTER AND SET DFUNC
        DFUNC = 0
        DO SROWIDX=1,NA
            DO SCOLIDX=1,NZ
                IF (VFUNC_DEF(SROWIDX,SCOLIDX)>VFUNC_CLEAN(SROWIDX,SCOLIDX)) THEN
                    DFUNC(SROWIDX, SCOLIDX) = 1
                ENDIF
            ENDDO
        ENDDO
        PRINT*, "atrans"
        CALL CREATE_A_TRANSITION_MAT() ! CREATE MARKOV TRANSITION MATRIX FOR
        CALL FIND_STAT_DIST() ! STATIONARY DISTRIBUTION
        ! COMPUTE ERROR AND Q DIFFERENTLY FOR DIFFERENT EQUILIBRIUM
        PRINT*, "QPOOL"
        IF (POOL) THEN
            CALL Q_POOLING(ERROR_Q)
        ELSE
            CALL Q_SEPARATING(ERROR_Q)
        ENDIF
        ! CHECK MARKET CLEARING CONDITIONS
        ! UPDATE Q IF ERROR IS STILL BIG
    ENDDO

    CALL WRITE_ALL()! WRITE RESULTS FOR PLOTTING USE

END PROGRAM PS4B

! ALL SUBROUTINES
! RULE: ONLY ONE OUTER LOOP PER SUBROUTINE
SUBROUTINE BELLMAN_CLEAN(ERROR_CLEAN)
    USE PS4BPARA
    USE PS4BRES
    IMPLICIT NONE
    REAL(KIND=8), INTENT(OUT):: ERROR_CLEAN
    REAL(KIND=8):: COND_MAX_UTIL, CONSUM, UTIL
    INTEGER:: SROWIDX, SCOLIDX, CHOICEIDX

    DO SCOLIDX = 1, NZ!START BELLMAN CLEAN
        DO SROWIDX=1, NA
            COND_MAX_UTIL = -1e12
            DO CHOICEIDX=1,NA ! LOOP OVER CHOICE OF ASSET PRIME
                CONSUM = A_GRID(SROWIDX) + STATES(SCOLIDX) - Q(CHOICEIDX, SCOLIDX)* A_GRID(CHOICEIDX)
                IF (CONSUM > 0.) THEN
                    UTIL = ((CONSUM**(1-ALPHA)-1)/(1-ALPHA))+BETA*SUM(EMP_MARKOV(SCOLIDX,:)*VFUNC_CLEAN(CHOICEIDX,:))
                    IF (UTIL>COND_MAX_UTIL) THEN
                        PFUNC_CLEAN(SROWIDX, SCOLIDX) = CHOICEIDX
                        COND_MAX_UTIL = UTIL
                    ENDIF
                ENDIF
            ENDDO ! END LOOP CHOICE SPACE FOR ONE STATE
            VFUNC_CLEAN_NEW(SROWIDX, SCOLIDX) = COND_MAX_UTIL
        ENDDO
    ENDDO ! END BELLMAN CLEAN
    ERROR_CLEAN = MAXVAL(ABS(VFUNC_CLEAN_NEW - VFUNC_CLEAN))
    VFUNC_CLEAN = VFUNC_CLEAN_NEW
END SUBROUTINE

SUBROUTINE BELLMAN_DEFAULT(ERROR_DEF)
    USE PS4BPARA
    USE PS4BRES
    IMPLICIT NONE
    REAL(KIND=8), INTENT(OUT):: ERROR_DEF
    REAL(KIND=8):: COND_MAX_UTIL, CONSUM, UTIL, NEXT
    INTEGER:: SROWIDX, SCOLIDX, CHOICEIDX

    DO SCOLIDX=1, NZ
        DO SROWIDX= ZERO_LOC, NA ! NOT POSSIBLE TO HAVE BORROWED MONEY FOR DEFAULTED PEOPL
            COND_MAX_UTIL = -1e12
            DO CHOICEIDX= ZERO_LOC, NA ! LOOP OVER CHOICE; AGAIN, NOT POSSIBLE TO HAVE BORROWED MONEY
                CONSUM = A_GRID(SROWIDX) + STATES(SCOLIDX) - Q(CHOICEIDX, SCOLIDX)* A_GRID(CHOICEIDX)
                IF (CONSUM > 0.) THEN
                    UTIL = ((CONSUM**(1-ALPHA)-1)/(1-ALPHA))+ &
                    BETA*(RHO*SUM(EMP_MARKOV(SCOLIDX,:)*VFUNC_DEF(CHOICEIDX,:)) + &
                    (1-RHO)*SUM(EMP_MARKOV(SCOLIDX,:)*VFUNC_CLEAN(CHOICEIDX,:)))
                    IF (UTIL>COND_MAX_UTIL) THEN
                        PFUNC_DEF(SROWIDX, SCOLIDX) = CHOICEIDX
                        COND_MAX_UTIL = UTIL
                    ENDIF
                ENDIF
            ENDDO ! END LOOPING CHOICE
            VFUNC_DEF_NEW(SROWIDX, SCOLIDX) = COND_MAX_UTIL
        ENDDO
    ENDDO
    ERROR_DEF = MAXVAL(ABS(VFUNC_DEF_NEW - VFUNC_DEF))
    VFUNC_DEF = VFUNC_DEF_NEW
END SUBROUTINE

SUBROUTINE CREATE_A_TRANSITION_MAT()
    USE PS4BPARA
    USE PS4BRES
    IMPLICIT NONE
    INTEGER:: SROWIDX, SCOLIDX, TROWIDX, TCOLIDX, H, AP_CHOICE, EMPIDX, NO_FLAG_COL, STAY_FLAG_COL, START


    ! THE ASSET TRANSITION MATRIX IS ARRANGED AS (CLEAN_EMPLOYED(A1-AN), CLEAN_UNEMP(A1-N), DEF_EMP(1-N), DEF_UNEMP(1-N))
    A_TRANSITION_MAT= 0.
    ! POPULATE MARKOV ASSET MARTRIX
    DO SCOLIDX=1, NZ
        DO H=0, 1
            IF (H==0) THEN
                START=1
            ELSE
                START=ZERO_LOC ! DEFAULTED PEOPLE NEVER REACH LOWER THAN ZERO_LOC
            ENDIF
            DO SROWIDX=START, NA
                TROWIDX = SROWIDX +(SCOLIDX-1)*NA + H*(NA*NZ)
                ! FEELING LIKE I SHOULD MERGE THE POLICY FUNC INTO 1
                IF (H==0) THEN
                    AP_CHOICE = PFUNC_CLEAN(SROWIDX, SCOLIDX)
                ELSE
                    AP_CHOICE = PFUNC_DEF(SROWIDX, SCOLIDX)
                ENDIF
                IF (H==0) THEN ! IF NOT YET DEFAULTED
                    IF (DFUNC(SROWIDX, SCOLIDX)==1) THEN ! IF CHOOSE TO DEFAULT
                        DO EMPIDX=1,NZ
                            TCOLIDX = NA+NA*EMPIDX+1
                            A_TRANSITION_MAT(TROWIDX, TCOLIDX) = EMP_MARKOV(SCOLIDX, EMPIDX)
                        ENDDO
                    ELSE ! IF CHOOSE NOT TO DEFAULT
                        DO EMPIDX=1, NZ
                            TCOLIDX = NA*(EMPIDX-1) + AP_CHOICE
                            A_TRANSITION_MAT(TROWIDX, TCOLIDX) = EMP_MARKOV(SCOLIDX, EMPIDX)
                        ENDDO
                    ENDIF
                ELSE ! IF ALREADY DEFAULTED
                    DO EMPIDX=1, NZ
                        NO_FLAG_COL = NA*(EMPIDX-1) + AP_CHOICE ! WHEN DEFAULT FLAG IS REMOVED - CLEAN AGAIN
                        STAY_FLAG_COL = 2*NA + NA*(EMPIDX-1) + AP_CHOICE ! WHEN DEFAULT FLAG STAYS
                        A_TRANSITION_MAT(SROWIDX, NO_FLAG_COL) = (1-RHO)*EMP_MARKOV(SCOLIDX, EMPIDX)
                        A_TRANSITION_MAT(SROWIDX, STAY_FLAG_COL) = RHO*EMP_MARKOV(SCOLIDX, EMPIDX)
                    ENDDO
                ENDIF
            ENDDO ! END H LOOP
        ENDDO ! END NZ-SCOL LOOP
    ENDDO ! END NA-SROW LOOP

END SUBROUTINE

SUBROUTINE FIND_STAT_DIST()
    USE PS4BPARA
    USE PS4BRES
    IMPLICIT NONE
    REAL(KIND=8):: ERROR_STAT=100, CRIT_STAT=1e-3

    STAT_DIST_NEW = STAT_DIST
    STAT_DIST_NEW = 0.
    DO WHILE (ERROR_STAT>CRIT_STAT)
        STAT_DIST = MATMUL(STAT_DIST, A_TRANSITION_MAT)
        ERROR_STAT = MAXVAL(ABS(STAT_DIST_NEW - STAT_DIST))
        STAT_DIST = STAT_DIST_NEW
    ENDDO
END SUBROUTINE

SUBROUTINE Q_SEPARATING(ERROR_Q)
    USE PS4BPARA
    USE PS4BRES
    IMPLICIT NONE
    REAL(KIND=8), INTENT(INOUT):: ERROR_Q
    REAL(KIND=8):: CRIT_Q = 1e-3, RISK
    INTEGER:: SROWIDX, SCOLIDX, NEXT_STATE_IDX
    REAL(KIND=8), DIMENSION(NA,NZ):: ERROR_ARR

    ! FIRST CALCUALTE ERROR
    DO SROWIDX=1,NA
        DO SCOLIDX=1, NZ
            RISK = 0.0
            DO NEXT_STATE_IDX=1, NZ
                RISK = RISK + EMP_MARKOV(SCOLIDX, NEXT_STATE_IDX)*DFUNC(SROWIDX, NEXT_STATE_IDX)
            ENDDO
        ERROR_ARR(SROWIDX, SCOLIDX) = ABS(RISK-INTEREST)
        IF (ERROR_ARR(SROWIDX, SCOLIDX)> CRIT_Q) THEN    ! NOTE THAT DEFAULTED CANNOT BORROW, NONE OF THEIR BUSINESS
            Q(SROWIDX,SCOLIDX) = Q(SROWIDX,SCOLIDX) - (RISK-INTEREST)
        ENDIF
        ENDDO
    ENDDO
    ERROR_Q = MAXVAL(ERROR_ARR)

END SUBROUTINE

SUBROUTINE Q_POOLING(ERROR_Q)
    ! SHIFT Q WITH SAME AMOUNT
    USE PS4BPARA
    USE PS4BRES
    IMPLICIT NONE
    REAL(KIND=8), INTENT(INOUT):: ERROR_Q
    REAL(KIND=8):: CRIT_Q = 1e-3, TOTAL_LOSS=0., TOTAL_BORROW=0., LOSS_RATE=0.
    INTEGER:: SROWIDX, SCOLIDX, AP_CHOICE

    DO SCOLIDX=1, NZ
        DO SROWIDX= 1, NA
            IF (SROWIDX>ZERO_LOC) THEN ! THERE IS THE DEFAULTED PEOPLE, THEY SAVE, AND THE SAVED MONEY ARE RETNED OUT
                AP_CHOICE = PFUNC_CLEAN(SROWIDX, SCOLIDX)
                IF (A_GRID(AP_CHOICE)>0) THEN
                    TOTAL_BORROW = TOTAL_BORROW + A_GRID(AP_CHOICE)*STAT_DIST(SROWIDX+NA*SCOLIDX)
                ENDIF
            ELSE
                IF (DFUNC(SROWIDX, SCOLIDX)==1) THEN !
                    TOTAL_LOSS =  TOTAL_LOSS -  A_GRID(SROWIDX)*STAT_DIST(SROWIDX+NA*SCOLIDX)
                ENDIF
            ENDIF
        ENDDO
    ENDDO
    ! UPDATE LOSS RATE
    LOSS_RATE= TOTAL_LOSS/TOTAL_BORROW
    ERROR_Q = ABS(LOSS_RATE-INTEREST) ! NO NEED TO UPDATE INTEREST
    ! UPDATE Q
    IF (ERROR_Q>CRIT_Q) THEN
        DO SCOLIDX=1,NZ
            DO SROWIDX=1, ZERO_LOC
                Q(SROWIDX, SCOLIDX) = Q(SROWIDX, SCOLIDX) - (LOSS_RATE-INTEREST)
            ENDDO
        ENDDO
    ENDIF
END SUBROUTINE

SUBROUTINE WRITE_ALL()
    USE PS4BPARA
    USE PS4BRES
    IMPLICIT NONE
    INTEGER:: SROWIDX
    INTEGER, DIMENSION(4):: SIDX  
    CHARACTER(LEN=130):: PATH="/Users/chek_choi/Downloads/fortran/"
    CHARACTER(LEN=150):: FILE_NAME

        FILE_NAME = TRIM(PATH)//"VALUEFUNC"
        OPEN(UNIT=1, FILE=FILE_NAME, STATUS='REPLACE') ! START WITH THE TWO VALUE FUNCTIONS
        DO SROWIDX=1, NA
            WRITE(UNIT=1,FMT=*) VFUNC_CLEAN(SROWIDX,:)
        ENDDO
        CLOSE(UNIT=1)

        FILE_NAME = TRIM(PATH)//"POLICYFUNC"
        OPEN(UNIT=2, FILE=FILE_NAME, STATUS='REPLACE') ! ALSO SAVE POLICY FUNCTIONS
        DO SROWIDX=1, NA
            WRITE(UNIT=2,FMT=*) PFUNC_CLEAN(SROWIDX,:)
        ENDDO
        CLOSE(UNIT=2)

        FILE_NAME = TRIM(PATH)//"STATDIST"
        OPEN(UNIT=3, FILE=FILE_NAME, STATUS='REPLACE') ! ALSO SAVE POLICY FUNCTIONS
        DO SROWIDX=1, NA
            SIDX = (/SROWIDX, SROWIDX+NA, SROWIDX+2*NA, SROWIDX+3*NA/)
            WRITE(UNIT=3,FMT=*) STAT_DIST(SIDX)
        ENDDO
        CLOSE(UNIT=3)

        FILE_NAME = TRIM(PATH)//"AGRID"
        OPEN(UNIT=4, FILE=FILE_NAME, STATUS='REPLACE') ! FOR HAVING THE X-AXIS OF PLOT
        WRITE(UNIT=4,FMT=*) A_GRID
        CLOSE(UNIT=4)

        FILE_NAME = TRIM(PATH)//"VALUEFUND"
        OPEN(UNIT=5, FILE=FILE_NAME, STATUS='REPLACE') ! START WITH THE TWO VALUE FUNCTIONS
        DO SROWIDX=1, NA
            WRITE(UNIT=5,FMT=*) VFUNC_DEF(SROWIDX,:)
        ENDDO
        CLOSE(UNIT=5)

        FILE_NAME = TRIM(PATH)//"POLICYFUND"
        OPEN(UNIT=6, FILE=FILE_NAME, STATUS='REPLACE') ! ALSO SAVE POLICY FUNCTIONS
        DO SROWIDX=1, NA
            WRITE(UNIT=6,FMT=*) PFUNC_DEF(SROWIDX,:)
        ENDDO
        CLOSE(UNIT=6)
END SUBROUTINE

