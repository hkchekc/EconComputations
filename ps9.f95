MODULE PS9PARA
    IMPLICIT NONE
    REAL(KIND=8), PARAMETER:: PH=0.0, PL=5.0 ! PRICES
    REAL(KIND=8), PARAMETER:: ML=0.0, MH=5.0 ! MASS OF FIRMS
    REAL(KIND=8), PARAMETER:: THETA=0.64, BETA=0.8, GAMMA=0.5772156649
    REAL(KIND=8)::ENT_MASS=100.
    REAL(KIND=8), PARAMETER:: ENT_COST=5., FIX_COST=10.
    REAL(KIND=8),PARAMETER:: A=1./200.
    REAL(KIND=8), DIMENSION(5),PARAMETER:: ENT_DIST=(/0.37,0.4631,0.1102,0.0504,0.0063/) !V(S)
    REAL(KIND=8), DIMENSION(5),PARAMETER:: STATES=(/0.000398,3.58,6.82,12.18,18.79/) !5 STATES
    REAL(KIND=8), DIMENSION(5,5),PARAMETER:: TRANS=RESHAPE((/0.6598,0.1997,0.2,0.2,0.2,0.26,0.7201,0.2,0.2,&
    0.2,0.0416,0.042,0.5555,0.2502,0.25,0.0331,&
    0.0326,0.0344,0.3397,0.34,0.0055,0.0056,0.0101,0.0101,0.01/), (/5,5/))
    INTEGER, PARAMETER:: NZ=SIZE(STATES)
    REAL(KIND=8), PARAMETER:: CRIT=1E-1
    REAL(KIND=8), DIMENSION(1):: MUL_TMP ! A VARIABLE TO STORE RESULT OF MATMUL
END MODULE

MODULE PS9RES
    USE PS9PARA
    IMPLICIT NONE
    REAL(KIND=8):: P_HIGH=PH, P_LOW=PL, M_LOW=ML, M_HIGH=MH
    REAL(KIND=8):: P, M
    REAL(KIND=8):: ERROR_P, ERROR_LAB
    REAL(KIND=8), DIMENSION(NZ):: LAB_DEM
    REAL(KIND=8):: LAB_SUP
    REAL(KIND=8):: AGG_LAB_DEM, LAB_INC, LAB_ENT, LAB_ENT_RATIO
    REAL(KIND=8), DIMENSION(NZ):: ENT_VF=0., ENT_VF_NEW, LAB_VF=0., LAB_VF_NEW, MOTIONS
    INTEGER(KIND=8), DIMENSION(NZ):: ENT_PF
END MODULE

MODULE PS9TVRES
    USE PS9PARA
    IMPLICIT NONE
    REAL(KIND=8):: ALPHA
    REAL(KIND=8), DIMENSION(NZ, 2):: SIGMA1, SIGMA2, SIGMA
    REAL(KIND=8), DIMENSION(NZ):: PF_TV1, PF_TV2, VF_TV, VF_TV_NEW

END MODULE

PROGRAM PS9
    USE PS9PARA
    USE PS9RES
    USE PS9TVRES
    IMPLICIT NONE
    INTEGER:: IDX

    CALL STANDARD()
    PRINT*, P, M, LAB_SUP, LAB_SUP
    P_HIGH=PH
    P_LOW=PL
    M_LOW=ML
    M_HIGH=MH
    ALPHA=1.
    CALL TV()
    PRINT*, P, M, LAB_SUP, LAB_SUP
    P_HIGH=PH
    P_LOW=PL
    M_LOW=ML
    M_HIGH=MH
    ALPHA=2.
    CALL TV()

    OPEN(UNIT=23, FILE='DECISION', STATUS='REPLACE')
        DO IDX=1, NZ
            WRITE(UNIT=23, FMT=*) ENT_PF(IDX), SIGMA1(IDX, 1), SIGMA2(IDX, 1)
        ENDDO
    CLOSE(UNIT=23)
END PROGRAM

SUBROUTINE STANDARD()
    USE PS9PARA
    USE PS9RES
    IMPLICIT NONE

    ERROR_P=100.
    P = (P_HIGH+P_LOW)/2.
    DO WHILE (ERROR_P>CRIT) ! ENTRANT CONDITION
        CALL ENTRY_CLEAR()
    ENDDO

    ERROR_LAB=100.
    M=1. ! AS STATED IN THE PROBLEM SET, INITIALIZE
    DO WHILE (ERROR_LAB>CRIT)
        CALL LAB_CLEAR()
    ENDDO
END SUBROUTINE

SUBROUTINE ENTRY_CLEAR()
    USE PS9PARA
    USE PS9RES
    IMPLICIT NONE
    INTEGER:: IDX
    REAL(KIND=8):: NSTAR ! OPT EMPLOY
    REAL(KIND=8):: ERROR_VFI
    REAL(KIND=8), DIMENSION(NZ):: VF_STAY, VF_EXIT

    ERROR_VFI=100.
    DO WHILE(ERROR_VFI>CRIT)
        DO IDX=1, NZ
            NSTAR = (THETA*P*STATES(IDX))**(1/(1-THETA))
            LAB_DEM(IDX)=NSTAR
            VF_EXIT(IDX) = P*STATES(IDX)*(NSTAR**THETA)-NSTAR-P*FIX_COST
            MUL_TMP = MATMUL(TRANS(1,:), RESHAPE(ENT_VF, (/NZ, 1/)))
            VF_STAY(IDX) = VF_EXIT(IDX) + BETA*MUL_TMP(1)
            ENT_VF_NEW(IDX)=MAX(VF_EXIT(IDX), VF_STAY(IDX))
            MUL_TMP = MAXLOC((/VF_STAY(IDX), VF_EXIT(IDX)/))
            ENT_PF(IDX) = MUL_TMP(1) -1.
        ENDDO
        ERROR_VFI= MAXVAL(ABS(ENT_VF-ENT_VF_NEW))
        ENT_VF = ENT_VF_NEW
    ENDDO

    CALL CAL_ERRORP(.TRUE.)
END SUBROUTINE

SUBROUTINE CAL_ERRORP(STAND)
    USE PS9PARA
    USE PS9RES
    USE PS9TVRES
    IMPLICIT NONE
    LOGICAL, INTENT(IN):: STAND

    IF (STAND) THEN
        MUL_TMP = MATMUL(ENT_VF, RESHAPE(ENT_DIST, (/NZ,1/)))
        PRINT*, "MUTL_TMP ENT MASS", MUL_TMP, SUM(ENT_VF), SUM(ENT_DIST)
        PRINT*, "==========================================="
        ENT_MASS= MUL_TMP(1)/P-ENT_COST
    ENDIF

    IF (ENT_MASS>0.) THEN
        P_HIGH = P
    ELSE
        P_LOW = P
    ENDIF
    P = (P_LOW+P_HIGH)/2
    ERROR_P= ABS(ENT_MASS)
    PRINT*, "ENTRY ERROR P", ERROR_P, P
END SUBROUTINE

SUBROUTINE LAB_CLEAR()
    USE PS9PARA
    USE PS9RES
    IMPLICIT NONE
    INTEGER:: IDX
    REAL(KIND=8):: ERROR_VFI, PI

    ERROR_VFI=100.
    MOTIONS=0.1 ! JUST RANDOM GUESS
    DO WHILE(ERROR_VFI> CRIT)
        DO IDX=1,NZ
            MUL_TMP =  0!MATMUL(RESHAPE((1-ENT_PF), (/1,NZ/)),RESHAPE(TRANS(IDX,:), (/NZ, 1/)))
            PRINT*, MATMUL(RESHAPE((1-ENT_PF), (/1,NZ/)),RESHAPE(TRANS(IDX,:), (/NZ, 1/)))
            MOTIONS(IDX)= MUL_TMP(1)*MOTIONS(IDX)+MUL_TMP(1)*M*ENT_DIST(IDX)! MU LAW OF MOTION
        ENDDO
        ERROR_VFI = MAXVAL(ABS(LAB_VF-LAB_VF_NEW))
        LAB_VF = LAB_VF_NEW
    ENDDO

    ! LABOR DEMAND
    MUL_TMP = MATMUL(ENT_DIST, RESHAPE(LAB_DEM, (/NZ,1/)))
    AGG_LAB_DEM = M*MUL_TMP(1)
    MUL_TMP = MATMUL(MOTIONS, RESHAPE(LAB_DEM, (/NZ,1/)))
    AGG_LAB_DEM= AGG_LAB_DEM+ MUL_TMP(1)

    PI=0.
    ! LABOR SUPPLY
    DO IDX=1, NZ
        PI =PI+(P*STATES(IDX)*(LAB_DEM(IDX)**THETA)-LAB_DEM(IDX)-P*FIX_COST)*MOTIONS(IDX)+&
        M*(P*STATES(IDX)*(LAB_DEM(IDX)**THETA)-LAB_DEM(IDX)-P*ENT_COST)*ENT_DIST(IDX)
    ENDDO

    LAB_SUP = (P/A)-PI ! BASED ON FOC

    ERROR_LAB = ABS(LAB_SUP-AGG_LAB_DEM)
    IF (LAB_SUP>AGG_LAB_DEM) THEN
        M_LOW = M
    ELSE
        M_HIGH = M
    ENDIF
    PRINT*, "LABOR",    ERROR_LAB, M, AGG_LAB_DEM, LAB_SUP
END SUBROUTINE

SUBROUTINE TV()
    USE PS9PARA
    USE PS9RES
    USE PS9TVRES
    IMPLICIT NONE
    REAL(KIND=8):: ERROR_TV, NSTAR
    INTEGER:: IDX
    REAL(KIND=8), DIMENSION(NZ):: VF_STAY, VF_EXIT
    REAL(KIND=8), DIMENSION(2):: EXP_VAL

    ERROR_TV=100.
    P = (P_HIGH+P_LOW)/2.
    VF_TV =1. ! INITIAL GUESS
    DO WHILE (ERROR_TV>CRIT) ! ENTRANT CONDITION
        DO IDX=1, NZ
            NSTAR = (THETA*P*STATES(IDX))**(1/(1-THETA))
            LAB_DEM(IDX)=NSTAR
            VF_EXIT(IDX) = P*STATES(IDX)*(NSTAR**THETA)-NSTAR-P*FIX_COST
            !MUL_TMP = MATMUL(RESHAPE(TRANS(IDX,:), (/1, NZ/)), RESHAPE(VF_TV, (/NZ,1/)))
            VF_STAY(IDX) = VF_EXIT(IDX) + BETA*MUL_TMP(1)
            EXP_VAL = (/EXP(ALPHA*VF_EXIT(IDX)),EXP(ALPHA*VF_STAY(IDX))/)
            VF_TV_NEW(IDX) = (GAMMA/ALPHA)+LOG(SUM(EXP_VAL))/ALPHA
            SIGMA(IDX,:) = EXP_VAL/SUM(EXP_VAL) ! DECISION RULES 1-EXIT 2-STAY
        ENDDO
        ERROR_TV = MAXVAL(ABS(VF_TV-VF_TV_NEW))
        VF_TV = VF_TV_NEW

    ENDDO

    CALL CAL_ERRORP(.FALSE.)

    ! EXACTLY THE SAME
    CALL LAB_CLEAR()

    IF (ALPHA==1.) THEN
        SIGMA1 = SIGMA
    ELSE
        SIGMA2 = SIGMA
    ENDIF
END SUBROUTINE

