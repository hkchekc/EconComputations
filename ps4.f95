MODULE PS4PARA
    IMPLICIT NONE
    INTEGER:: I ! FOR ITER
    REAL(KIND=8), PARAMETER:: ALPHA=1.5, BETA=0.9932
    REAL(KIND=8), DIMENSION(2), PARAMETER:: STATES=(/1.0, 0.5/)
    INTEGER, PARAMETER:: NZ=SIZE(STATES), NA=700
    REAL(KIND=8), DIMENSION(NZ, NZ), PARAMETER:: PI=TRANSPOSE(RESHAPE((/0.97, 0.03,0.5,0.5/),(/2,2/)))
    REAL(KIND=8), PARAMETER:: A_MIN=-2., A_MAX=5., STEPS=(A_MAX-A_MIN)/(FLOAT(NA)-1.)
    REAL(KIND=8), DIMENSION(NA), PARAMETER:: A_GRID=(/(I*STEPS, I=1, NA)/) + A_MIN - STEPS
END MODULE

MODULE PS4RES
    USE PS4PARA
    IMPLICIT NONE
    REAL(KIND=8):: HIGH_Q=1., LOW_Q=0.9932, Q
    REAL(KIND=8), DIMENSION(NA,NZ):: VFUNC=0., VFUNC_NEW=0., CONSUM_ARR
    REAL(KIND=8), DIMENSION(NA*NZ):: STAT_DIST
    REAL(KIND=8), DIMENSION(NA*NZ,NA*NZ):: A_CHANGE_MAT
    INTEGER, DIMENSION(NA,NZ):: PFUNC=0
END MODULE

PROGRAM PS4
    USE PS4PARA
    USE PS4RES
    IMPLICIT NONE
    INTEGER:: SROWIDX
    REAL(KIND=8):: ERROR_Q=100., ERROR_VFI, CRIT=1e-3

    DO WHILE (ERROR_Q> CRIT)
        PRINT*, Q
        Q = (HIGH_Q+LOW_Q)/2.
        ERROR_VFI=100.
        DO WHILE (ERROR_VFI> CRIT)
            CALL BELLMAN(ERROR_VFI)
        ENDDO
        CALL POP_A_CHANGE_MAT()
        CALL FIND_STAT_DIST()
        CALL COMPUTE_ERROR(ERROR_Q)
    ENDDO
    PRINT*, A_GRID(((MAXLOC(STAT_DIST)-1)/2+1))
    OPEN(UNIT=3, FILE='/Users/chek_choi/Downloads/fortran/STATDIST', STATUS='REPLACE')
    DO SROWIDX=1, NA
        WRITE(UNIT=3,FMT=*) STAT_DIST([2*(SROWIDX-1) +1, 2*(SROWIDX-1) +2])
    ENDDO
    CLOSE(UNIT=3)

    CALL FIND_LORENZ()
END PROGRAM PS4

SUBROUTINE BELLMAN(ERROR_VFI)
    USE PS4PARA
    USE PS4RES
    IMPLICIT NONE
    REAL(KIND=8), INTENT(OUT):: ERROR_VFI
    REAL(KIND=8):: CONSUM, UTIL, COND_UTIL, CU, NU
    REAL(KIND=8), DIMENSION(NA,NZ):: ABS_DIFF
    INTEGER:: RIDX, CIDX, CHOICE

    DO RIDX=1, NA
        DO CIDX=1, NZ
            COND_UTIL=-1e10
            DO CHOICE=1, NA
                CONSUM = STATES(CIDX) + A_GRID(RIDX) - Q*A_GRID(CHOICE)
                IF (CONSUM>0.) THEN
                    CU = CONSUM**(1-ALPHA)/(1-ALPHA) ! CURRENT UTIL
                    NU = SUM(PI(CIDX,:)*VFUNC(CHOICE,:))! NEXT EXPECTED UTIL
                    UTIL = CU + BETA*NU
                    IF (UTIL>COND_UTIL) THEN
                        VFUNC_NEW(RIDX, CIDX)=UTIL
                        PFUNC(RIDX, CIDX)=CHOICE
                        COND_UTIL=UTIL
                        CONSUM_ARR(RIDX, CIDX) = CONSUM
                    ENDIF
                ENDIF
            ENDDO
        ENDDO
    ENDDO
    ABS_DIFF = ABS(VFUNC_NEW-VFUNC)
    ERROR_VFI = MAXVAL(ABS_DIFF)
    VFUNC = VFUNC_NEW
    
END SUBROUTINE

SUBROUTINE POP_A_CHANGE_MAT()
    USE PS4PARA
    USE PS4RES
    IMPLICIT NONE
    INTEGER:: RIDX, CIDX, CUR_IDX, NEXT_IDX, CHOICE, NEXT_Z

    A_CHANGE_MAT=0.
    DO RIDX=1, NA
        DO CIDX=1, NZ
            CUR_IDX = 2*RIDX -2 + CIDX
            CHOICE=PFUNC(RIDX, CIDX)
            DO NEXT_Z=1, NZ
                NEXT_IDX= 2*CHOICE -2 + NEXT_Z
                A_CHANGE_MAT(CUR_IDX, NEXT_IDX) = A_CHANGE_MAT(CUR_IDX, NEXT_IDX)+ PI(CIDX, NEXT_Z)
            ENDDO
        ENDDO
    ENDDO
END SUBROUTINE

SUBROUTINE FIND_STAT_DIST()
    USE PS4PARA
    USE PS4RES
    IMPLICIT NONE
    REAL(KIND=8):: ERROR_STAT, CRIT_STAT=1e-3
    REAL(KIND=8), DIMENSION(NA*NZ) :: STAT_DIST_NEW, ABS_DIFF

    STAT_DIST= 1/(FLOAT(NA)*2.)
    ERROR_STAT=100.
    DO WHILE (ERROR_STAT>CRIT_STAT)
        STAT_DIST_NEW = MATMUL(STAT_DIST, A_CHANGE_MAT)
        ABS_DIFF = ABS(STAT_DIST_NEW-STAT_DIST)
        ERROR_STAT = MAXVAL(ABS_DIFF)
        STAT_DIST = STAT_DIST_NEW
    ENDDO
END SUBROUTINE

SUBROUTINE COMPUTE_ERROR(ERROR_Q)
    USE PS4PARA
    USE PS4RES
    IMPLICIT NONE
    REAL(KIND=8), INTENT(OUT):: ERROR_Q
    INTEGER:: RIDX, CIDX
    REAL(KIND=8):: NET_ASSET! MARKET CLEARING

    NET_ASSET = 0.
    DO RIDX=1, NA
        DO CIDX=1, NZ
            NET_ASSET = NET_ASSET + A_GRID(PFUNC(RIDX, CIDX))*STAT_DIST(2*RIDX -2 + CIDX)
        ENDDO
    ENDDO

    IF (NET_ASSET>0.) THEN
        HIGH_Q=Q
    ELSE
        LOW_Q = Q
    ENDIF
    ERROR_Q = ABS(HIGH_Q-LOW_Q)
END SUBROUTINE

SUBROUTINE FIND_LORENZ()
    USE PS4PARA
    USE PS4RES
    IMPLICIT NONE
    INTEGER:: RIDX
    REAL(KIND=8):: GINI=0.
    REAL(KIND=8), DIMENSION(NA):: LORENZ, DEGREE

    DEGREE=(/(I*(1./FLOAT(NA)), I=1,NA)/)

    LORENZ(1) = STAT_DIST(1)
      DO RIDX = 2, NA
          LORENZ(RIDX)= LORENZ(RIDX-1) + STAT_DIST(RIDX*2-2+1) + STAT_DIST(RIDX*2-2+2)
          GINI = GINI + (DEGREE(RIDX)-LORENZ(RIDX))
      ENDDO
    PRINT*, GINI/FLOAT(NA)
END SUBROUTINE
