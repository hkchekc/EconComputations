MODULE PS6PARA
    IMPLICIT NONE
    INTEGER, PARAMETER:: N=66, RETIRE_AGE=46, T=30 ! LIFE EXPECTANCY, RETIREMENT, TIME_SPACE
    REAL(KIND=8), PARAMETER:: A_MAX=2.0, A_MIN=-0.525, STEP=0.005
    INTEGER, PARAMETER:: NZ=2, NA=(A_MAX-A_MIN)/STEP
    REAL(KIND=8):: ALPHA=0.5, BETA=0.8
    REAL(KIND=8):: THETA_START=0.11, THETA_END=0, GAMMA=0.42, SIGMA=2.0, DELTA=0.06, POP_GROWTH= 0.011
    REAL(KIND=8), DIMENSION(2):: PROD_STATES = (/3.0, 0.5/)
    REAL(KIND=8), DIMENSION(2,2):: PROD_MARKOV = TRANSPOSE(RESHAPE((/0.9261,(1-0.9261),(1-0.9811),0.9811/),(/NZ,NZ/)))
    REAL(KIND=8), DIMENSION(N):: COHORT_POP
    REAL(KIND=8), DIMENSION(NA):: A_GRID
    REAL(KIND=8), DIMENSION(N,NZ):: AGE_EFF
    CONTAINS
        SUBROUTINE INIT_ARRAY()
                INTEGER:: I, SROWIDX
                COHORT_POP= (/((1.0/((1.0+POP_GROWTH)**I)), I=1,N)/)
                A_GRID = (/(I*STEP, I=1,NA)/) + A_MIN - STEP
                AGE_EFF(:,:)=0.
                OPEN(UNIT=13, FILE='ef.txt', STATUS='OLD')
                DO SROWIDX=1,RETIRE_AGE-1
                    READ(UNIT=13, FMT=*) AGE_EFF(SROWIDX,1)
                ENDDO
                CLOSE(UNIT=13)
                AGE_EFF(:,1) = AGE_EFF(:,1)*0.5
                AGE_EFF(:,2) = AGE_EFF(:,1)*3.0
        END SUBROUTINE INIT_ARRAY
END MODULE

MODULE PS6RES
    USE PS6PARA
    IMPLICIT NONE
    REAL(KIND=8), DIMENSION(T):: BENEFIT, INTEREST, WAGE, AGG_LABOR, AGG_CAP, THETA_PATH
    REAL(KIND=8), DIMENSION(NA,NZ,N, T):: VFUNC, LFUNC, STAT_DIST
    INTEGER, DIMENSION(NA,NZ,N, T):: PFUNC=0
    CONTAINS
    SUBROUTINE INIT_ARRAY()
            AGG_LABOR(:) = 1.0
            AGG_CAP(:) = 1.0
            THETA_PATH(:) = (/( ,I=1,T)/)
    END SUBROUTINE INIT_ARRAY
END MODULE

PROGRAM PS6
    USE PS6PARA
    USE PS6RES
    IMPLICIT NONE
    REAL(KIND=8):: ERROR=100., CRIT=1e-2
    INTEGER:: TIMEIDX, PERIOD


    CALL FIND_POINT(T) ! FIND THE END POINT
    ! START MAIN LOOP
    DO WHILE (ERROR>CRIT)
        DO TIMEIDX=1, T-1
            PERIOD = T-TIMEIDX
            CALL FIND_POINT(PERIOD)
        ENDDO
        ! DO SOMETHING HERE TO NORMALIZE THE STAT_DIST
        ! OBSERVE ERROR AND UPDATE PRICE
        CALL UPDATE_PRICE(ERROR)
        ! COMPUTE ERROR

    ENDDO

END PROGRAM PS6

! SUBROUTINES
SUBROUTINE END_POINT()
    ! FROM THETA = 0.11 TO THETA = 0
    USE PS6PARA, PS6RES
    IMPLICIT NONE

END SUBROUTINE

SUBROUTINE FIND_POINT(PERIOD) ! SAME AS PS5
    USE PS6PARA
    USE PS6RES
    IMPLICIT NONE
    INTEGER, INTENT(IN):: PERIOD
    REAL(KIND=8):: OPT_LABOR, NOM
    REAL(KIND=8):: ERROR=100. , CRIT_P=1e-3, LAST_CHOICE, CUR_CHOICE
    INTEGER:: AGEIDX, SROWIDX, SCOLIDX

        DO WHILE(ERROR>CRIT_P)
        ! UPDATE VARS
        ACAP_T = AGG_CAP(PERIOD)
        ALAB_T = AGG_LAB(PERIOD)
        ! NEED TO ADJUST THETA
        WAGE(PERIOD) = (1-ALPHA)*(ACAP_T**ALPHA)*(ALAB_T**(-ALPHA))! FOC WRT LABOR
        INTEREST(PERIOD) = ALPHA*(ACAP_T**(ALPHA-1))*(ALAB_T**(1-ALPHA))-DELTA! FOC WRT CAPITAL
        BENEFIT(PERIOD) = THETA_PATH(PERIOD)*WAGE*ALAB_T/SUM(COHORT_POP(RETIRE_AGE:N))
        PRINT*, "=================================================="
        PRINT*, "R, B,W:", INTEREST, BENEFIT, WAGE

        ! FIND OPTIMAL LABOR AND POPULATE LFUNC
        DO AGEIDX=1, RETIRE_AGE
            DO SROWIDX=1,NA
                DO SCOLIDX=1,NZ
                    CUR_CHOICE = A_GRID(PFUNC(SROWIDX,SCOLIDX,AGEIDX, PERIOD))
                    IF (AGEIDX/=1) THEN
                        LAST_CHOICE = (1+INTEREST)*A_GRID(PFUNC(SROWIDX,SCOLIDX,AGEIDX-1, PERIOD-1)) ! DISCOUNTED
                    ELSE
                        LAST_CHOICE = 0.
                    ENDIF
                    NOM = (GAMMA*(1-THETA)*PROD_STATES(SCOLIDX)*AGE_EFF(AGEIDX,SCOLIDX)*WAGE-(1-GAMMA)*(LAST_CHOICE-CUR_CHOICE))
                    OPT_LABOR = NOM/((1-THETA)*WAGE*PROD_STATES(SCOLIDX)*AGE_EFF(AGEIDX,SCOLIDX))
                    IF (OPT_LABOR > 1.0) THEN
                        OPT_LABOR = 1.0
                    ELSE IF (OPT_LABOR < 0.) THEN
                        OPT_LABOR = 0.0
                    ENDIF
                LFUNC(SROWIDX, SCOLIDX, AGEIDX) = OPT_LABOR
                ENDDO
            ENDDO
        ENDDO
        ! BACKWARD INDUCTION USING NEW VARS (BELLMAN)
        CALL BACKWARD_INDUCTION(PERIOD)
        ! UPDATE STAT_DIST
        CALL FIND_STAT_DIST()
    ENDDO

    ACAP_T = AGG_CAP(PERIOD)
    ALAB_T = AGG_LAB(PERIOD)
    WAGE(PERIOD) = (1-ALPHA)*(ACAP_T**ALPHA)*(ALAB_T**(-ALPHA))! FOC WRT LABOR
    INTEREST(PERIOD) = ALPHA*(ACAP_T**(ALPHA-1))*(ALAB_T**(1-ALPHA))-DELTA! FOC WRT CAPITAL
    BENEFIT(PERIOD) = THETA_PATH(PERIOD)*WAGE*ALAB_T/SUM(COHORT_POP(RETIRE_AGE:N))
END SUBROUTINE

SUBROUTINE BACKWARD_INDUCTION(PERIOD)
    USE PS6PARA
    USE PS6RES
    IMPLICIT NONE
    INTEGER, INTENT(IN):: PERIOD
    INTEGER:: AGEIDX, AGE, SROWIDX
    REAL(KIND=8):: CONSUM, UTIL, ERROR_VFI=100.
    REAL(KIND=8), DIMENSION(NA,NZ,N):: VFUNC_NEW

    ! FOR LAST AGE, ! SHOULD BE DETERMINISTIC, DO ONCE IS OK (NO CHOICE)
    DO SROWIDX=1,NA ! THIS IS THE CHOICE FROM LAST PERIOD/ CURRENT ASSET
            CONSUM = (1+INTEREST)*A_GRID(SROWIDX) + BENEFIT ! SPEND ALL IN LAST PERIOD
            PFUNC(:,:,N) = 1 ! ACTUALLY DOES NOT MATTER
            UTIL = CONSUM**((1-SIGMA)*GAMMA)/(1-SIGMA) ! NO NEXT PERIOD VALUE
            VFUNC_NEW(SROWIDX,:,N) = UTIL
    ENDDO

    DO AGEIDX = 2, N ! FOR AGE 20-65
        AGE = N- AGEIDX+1
        CALL BELLMAN(AGE, VFUNC_NEW)
    ENDDO
    ERROR_VFI = MAXVAL(ABS(VFUNC_NEW-VFUNC))
    VFUNC = VFUNC_NEW
END SUBROUTINE

SUBROUTINE BELLMAN(PERIOD, AGE, VFUNC_NEW)
    USE PS6PARA
    USE PS6RES
    IMPLICIT NONE
    INTEGER, INTENT(IN):: PERIOD, AGE
    REAL(KIND=8), DIMENSION(NA,NZ,N), INTENT(INOUT):: VFUNC_NEW
    REAL(KIND=8):: COND_MAX_UTIL, CONSUM, UTIL, WORKING, PROD, NEXTU
    INTEGER:: SROWIDX, SCOLIDX, CHOICEIDX

    IF (AGE< RETIRE_AGE) THEN ! WOKRING BELLMAN
        DO SROWIDX=1, NA
            DO SCOLIDX=1, NZ
                COND_MAX_UTIL = -1e12
                WORKING = LFUNC(SROWIDX, SCOLIDX, AGE)
                PROD = PROD_STATES(SCOLIDX)
                DO CHOICEIDX=1,NA ! LOOP OVER CHOICE OF ASSET PRIME
                    CONSUM = A_GRID(SROWIDX) + PROD*WORKING - INTEREST* A_GRID(CHOICEIDX)
                    IF (CONSUM > 0.) THEN
                        NEXTU = BETA*SUM(PROD_MARKOV(SCOLIDX,:)*VFUNC(CHOICEIDX,:,AGE+1))
                        UTIL = (CONSUM**GAMMA*(1-WORKING)**(1-GAMMA))**(1-SIGMA)/(1-SIGMA)+NEXTU
                        IF (UTIL>COND_MAX_UTIL) THEN
                            PFUNC(SROWIDX, SCOLIDX, AGE) = CHOICEIDX
                            COND_MAX_UTIL = UTIL
                        ENDIF
                    ENDIF
                ENDDO ! END LOOP CHOICE SPACE FOR ONE STATE
            ENDDO
        ENDDO
        VFUNC_NEW(SROWIDX, SCOLIDX, AGE) = COND_MAX_UTIL
    ELSE ! BELLMAN FOR RETIRED PEOPLE
        DO SROWIDX=1, NA
            COND_MAX_UTIL = -1e12
            DO CHOICEIDX=1, NA
                CONSUM = A_GRID(SROWIDX) + BENEFIT
                IF (CONSUM>0.) THEN
                    UTIL = CONSUM**((1-SIGMA)*GAMMA)/(1-SIGMA)+ BETA*(VFUNC(CHOICEIDX,1,AGE+1))
                    IF (UTIL>COND_MAX_UTIL) THEN
                        PFUNC(SROWIDX,:, AGE) = CHOICEIDX
                        COND_MAX_UTIL = UTIL
                    ENDIF
                ENDIF
            ENDDO
        ENDDO
        VFUNC_NEW(SROWIDX, :, AGE) = COND_MAX_UTIL ! PROD_STATE DO NOT AFFECT RETIRED PEOPLE
    ENDIF
END SUBROUTINE

SUBROUTINE FIND_STAT_DIST(PERIOD)
    USE PS6PARA
    USE PS6RES
    IMPLICIT NONE
    INTEGER:: SROWIDX, SCOLIDX, AGEIDX, LAST_AGE, LAST_CHOICE, TIDX
    REAL(KIND=8), DIMENSION(NA,NZ,N,T):: STAT_DIST_NEW
    REAL(KIND=8):: ERROR_STAT=100., CRIT_STAT=1e-2

    STAT_DIST(:,:,:,:) = 1.0/SIZE(STAT_DIST) ! START WITH UNIFORM
    ! EVERYONE HAVE ZERO ASSET AT STARTING AGE
    DO WHILE (ERROR_STAT>CRIT_STAT)
        STAT_DIST_NEW(:,:,:,:) = 0.
        STAT_DIST_NEW(:,1,1,:) = 0.2037* COHORT_POP(1)/SIZE(NA) ! ALWAYS NO ASSET AT FIRST AGE, BUT 2 PROD STATES
        STAT_DIST_NEW(:,2,1,:) = 0.7963*COHORT_POP(1)/SIZE(NA)
        DO TIDX=2,T ! WHAT IS THE DISTRIBUTION OF TIME
            DO AGEIDX=2, N
                DO SROWIDX=1, NA ! LAST PERIOD ASSET
                    DO SCOLIDX=1, NZ !LAST PERIOD PRODUCTIVITY
                        LAST_AGE = AGEIDX-1
                        LAST_CHOICE = PFUNC(SROWIDX, SCOLIDX, LAST_AGE, TIDX-1) ! TWO POSSIBLE
                        STAT_DIST_NEW(LAST_CHOICE, 1, AGEIDX, TIDX) = STAT_DIST_NEW(SROWIDX,1,LAST_AGE,TIDX-1)*PROD_MARKOV(1,SCOLIDX)
                        STAT_DIST_NEW(LAST_CHOICE, 2, AGEIDX,TIDX) =  STAT_DIST_NEW(SROWIDX,2,LAST_AGE,TIDX-1)*PROD_MARKOV(2,SCOLIDX)
                   ENDDO
                ENDDO
                STAT_DIST_NEW(:,:,AGEIDX) = STAT_DIST_NEW(:,:,AGEIDX)*COHORT_POP(AGEIDX)
            ENDDO
        ENDDO
        ERROR_STAT = ABS(MAXVAL(STAT_DIST_NEW-STAT_DIST))
        STAT_DIST = STAT_DIST_NEW
    ENDDO
END SUBROUTINE

SUBROUTINE UPDATE_PRICE(ERROR)
    ! COMPUTE ERROR AND UPDATE PRICE
    USE PS6PARA
    USE PS6RES
    IMPLICIT NONE
    REAL(KIND=8), INTENT(OUT):: ERROR
    INTEGER:: SROWIDX, SCOLIDX, AGEIDX
    REAL(KIND=8):: AGG_LABOR_NEW=0, AGG_CAP_NEW=0, PORTION, ERROR_LAB, ERROR_CAP

    DO AGEIDX=1, N ! CAL ERRORS
        DO SROWIDX=1,NA
            DO SCOLIDX=1,NZ
                PORTION = STAT_DIST(SROWIDX, SCOLIDX, AGEIDX)
                AGG_CAP_NEW = AGG_CAP_NEW+ A_GRID(SROWIDX)*PORTION
                IF (AGEIDX<RETIRE_AGE) THEN
                    AGG_LABOR_NEW = AGG_LABOR_NEW + LFUNC(SROWIDX, SCOLIDX, AGEIDX)*PORTION
                ENDIF
            ENDDO
        ENDDO
    ENDDO
    ERROR_LAB = MAXVAL(ABS(AGG_LABOR_NEW-AGG_LABOR))
    ERROR_CAP = MAXVAL(ABS(AGG_CAP_NEW-AGG_CAP))
    PRINT*, "UPDATE_PRICE ERROR", ERROR_LAB, ERROR_CAP
    ERROR = MAX(ERROR_CAP, ERROR_LAB)
    AGG_LABOR = 0.05*AGG_LABOR_NEW + 0.95*AGG_LABOR
    AGG_CAP = 0.05*AGG_CAP_NEW + 0.95*AGG_CAP
    ! UPDATE INTEREST, WAGE, BENEFIT AT THE START OF NEXT PERIOD (IT IS THE SAME)
END SUBROUTINE




